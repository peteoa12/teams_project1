a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}.footer,.nav li{font-size:.75em}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:'';content:none}.footer-container:after,.wrapper:after{content:" ";display:block}table{border-collapse:collapse;border-spacing:0}body,html{height:100%;width:100%;margin:0;padding:0;float:left;-webkit-font-smoothing:antialiased}.wrapper{max-width:95%;margin-left:auto;margin-right:auto}.header,.query_conatiner{width:100%;margin-right:0;float:left;clear:both;margin-left:0}.wrapper:after{clear:both}.nav_wrapper{margin-top:15px;margin-bottom:15px}.page-wrap{min-height:100vh}.header{background-color:#CFD1CD}@media (min-width:700px){.header{margin-bottom:15px}}.logo_container{width:16.33466%;float:left;margin-right:.39841%;cursor:pointer}.logo_container .logo{clear:both;width:100%;float:left;margin-left:0;margin-right:0;max-width:76px}.nav{width:83.26693%;float:right;margin-right:0;margin-top:30px}.catagories,.footer,.nav li,.results{float:left}.nav li{width:33.06773%;text-align:center}.nav li:nth-child(3n+1){margin-right:-100%;clear:both;margin-left:0}.nav li:nth-child(3n+2){margin-left:33.46614%;margin-right:-100%;clear:none}.nav li:nth-child(3n+3){margin-left:66.93227%;margin-right:-100%;clear:none}.footer{background:linear-gradient(#333,#000);font-family:'Source Code Pro',monospace;font-weight:300;clear:both;width:100%;margin-left:0;margin-right:0}.footer div:nth-child(2){margin-left:15%}.footer-container{max-width:95%;margin-left:auto;margin-right:auto;padding:20px}.footer-container:after{clear:both}.footer-container p{color:#fff;text-align:center}.footer-container span{margin-top:5px}@media (min-width:960px){.catagories{width:12.15139%;float:left;margin-right:.39841%;border:1px solid red}}.results{width:28.88446%;margin-right:.39841%;border:1px solid #00f}.map_container{width:58.16733%;float:right;height:100vh;margin-right:0}#map{width:100%;height:100%}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
